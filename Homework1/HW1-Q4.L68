00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 1/11/2020 6:08:49 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : HW1
00000000                             3  * Written by : Munehiro Fukuda / Johnathan Hewit
00000000                             4  * Date       : December 6th
00000000                             5  * Description: HW1 Question 4
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ************************************************************
00000000                             9  *
00000000                            10  * Beginning of EQUates section, just like #define in C
00000000                            11  *
00000000                            12  ************************************************************
00000000  =00004000                 13  addr1 EQU $4000
00000000  =00004001                 14  addr2 EQU $4001
00000000  =0000A7FF                 15  data2 EQU $A7FF
00000000  =00005555                 16  data3 EQU $5555
00000000  =00000000                 17  data4 EQU $0000
00000000  =00001246                 18  data5 EQU 4678
00000000  =0000004F                 19  data6 EQU %01001111
00000000  =00000017                 20  data7 EQU %00010111
00000000                            21  ************************************************************
00000000                            22  *
00000000                            23  * Beginning of code segment. This is the actual assembly language instructions.
00000000                            24  *
00000000                            25  ************************************************************
00000400                            26      ORG    $400    *This pseudo op code tells the assembler here
00000400                            27                     *The progream will run in memory
00000400                            28                     
00000400  303C A7FF                 29  start MOVE.W #data2, D0 * Load D0
00000404  123C 004F                 30        MOVE.B #data6, D1 * Load D1
00000408  143C 0017                 31        MOVE.B #data7, D2 * Load D2
0000040C  363C 5555                 32        MOVE.W #data3, D3 * Load D3
00000410  307C 4000                 33        MOVEA.W #addr1, A0 * Load address register
00000414  10C1                      34        MOVE.B D1, (A0)+ * Transfer byte to memory
00000416  10C2                      35        MOVE.B D2, (A0)+ * Transfer second byte
00000418  327C 4000                 36        MOVEA.W #addr1, A1 * Load address
0000041C  C751                      37        AND.W D3, (A1) * Logical AND
0000041E                            38  
0000041E                            39  * Stop here. The next instruction shows how a label is used
0000041E                            40  
0000041E  4EF8 0400                 41        JMP start    *This instruction keeps the program looping forever
00000422                            42        END $400     *This pseudo op-code tells the assembler where the

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR1               4000
ADDR2               4001
DATA2               A7FF
DATA3               5555
DATA4               0
DATA5               1246
DATA6               4F
DATA7               17
START               400
